--- a/src/PROPOSAL/detail/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.cxx
+++ b/src/PROPOSAL/detail/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.cxx
@@ -90,10 +90,9 @@ double CrossSectionDNDXInterpolant::GetUpperLimit(double energy, double rate)
         throw std::invalid_argument("no dNdx for this energy defined.");
     auto lim = GetIntegrationLimits(energy);
 
-    auto initial_guess = cubic_splines::ParameterGuess<std::array<double, 2>> {
-        .x = { energy, NAN },
-        .n = 1,
-    };
+    cubic_splines::ParameterGuess<std::array<double, 2>> initial_guess;
+    initial_guess.x = { energy, NAN };
+    initial_guess.n = 1;
 
     auto v = cubic_splines::find_parameter(interpolant, rate, initial_guess);
     return transform_v(lim.min, lim.max, v);
--- a/src/PROPOSAL/detail/PROPOSAL/propagation_utility/PropagationUtilityInterpolant.cxx
+++ b/src/PROPOSAL/detail/PROPOSAL/propagation_utility/PropagationUtilityInterpolant.cxx
@@ -90,9 +90,9 @@ double UtilityInterpolant::GetUpperLimit(double upper_limit, double rnd)
         rnd = -rnd;
 
     auto integrated_to_upper = interpolant_->evaluate(upper_limit);
-    auto initial_guess = cubic_splines::ParameterGuess<double> {
-        .x = NAN, .upper = upper_limit
-    };
+    cubic_splines::ParameterGuess<double> initial_guess;
+    initial_guess.x = NAN;
+    initial_guess.upper = upper_limit;
 
     return cubic_splines::find_parameter(
         *interpolant_, integrated_to_upper - rnd, initial_guess);
