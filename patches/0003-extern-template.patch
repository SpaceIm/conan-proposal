--- a/src/PROPOSAL/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.h
+++ b/src/PROPOSAL/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.h
@@ -40,10 +40,16 @@ namespace crosssection {
     struct ComptonKleinNishina;
 }
 template <>
-std::function<double(double, double, double)> transform_loss<crosssection::ComptonKleinNishina>::func;
+std::function<double(double, double, double)> transform_loss<crosssection::ComptonKleinNishina>::func
+    = [](double v_cut, double v_max, double v) {
+          return transform_loss_log(v_cut, v_max, v);
+      };
 
 template <>
-std::function<double(double, double, double)> retransform_loss<crosssection::ComptonKleinNishina>::func;
+std::function<double(double, double, double)> retransform_loss<crosssection::ComptonKleinNishina>::func
+    = [](double v_cut, double v_max, double v) {
+          return retransform_loss_log(v_cut, v_max, v);
+      };
 
 template <typename T1, typename... Args>
 auto build_dndx_def(T1 const& param, ParticleDef const& p, Args... args)
--- a/src/PROPOSAL/detail/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.cxx
+++ b/src/PROPOSAL/detail/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.cxx
@@ -7,18 +7,6 @@
 #include "CubicInterpolation/FindParameter.hpp"
 using namespace PROPOSAL;
 
-template <>
-std::function<double(double, double, double)> transform_loss<crosssection::ComptonKleinNishina>::func
-    = [](double v_cut, double v_max, double v) {
-          return transform_loss_log(v_cut, v_max, v);
-      };
-
-template <>
-std::function<double(double, double, double)> retransform_loss<crosssection::ComptonKleinNishina>::func
-    = [](double v_cut, double v_max, double v) {
-          return retransform_loss_log(v_cut, v_max, v);
-      };
-
 namespace PROPOSAL {
     double transform_relative_loss(double v_cut, double v_max, double v) {
         if (v < 0 || v_max == 0)
