--- a/src/PROPOSAL/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.h
+++ b/src/PROPOSAL/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.h
@@ -39,10 +39,10 @@ std::function<double(double, double, double)> retransform_loss<Param>::func
 namespace crosssection {
     struct ComptonKleinNishina;
 }
-template <>
+extern template
 std::function<double(double, double, double)> transform_loss<crosssection::ComptonKleinNishina>::func;
 
-template <>
+extern template
 std::function<double(double, double, double)> retransform_loss<crosssection::ComptonKleinNishina>::func;
 
 template <typename T1, typename... Args>
--- a/src/PROPOSAL/detail/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.cxx
+++ b/src/PROPOSAL/detail/PROPOSAL/crosssection/CrossSectionDNDX/CrossSectionDNDXInterpolant.cxx
@@ -7,13 +7,11 @@
 #include "CubicInterpolation/FindParameter.hpp"
 using namespace PROPOSAL;
 
-template <>
 std::function<double(double, double, double)> transform_loss<crosssection::ComptonKleinNishina>::func
     = [](double v_cut, double v_max, double v) {
           return transform_loss_log(v_cut, v_max, v);
       };
 
-template <>
 std::function<double(double, double, double)> retransform_loss<crosssection::ComptonKleinNishina>::func
     = [](double v_cut, double v_max, double v) {
           return retransform_loss_log(v_cut, v_max, v);
